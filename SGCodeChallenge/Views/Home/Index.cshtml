@model IndexViewModel
@{
    ViewData["Title"] = "SGCodeChallenge";
}
<div class="card text-center">
    <div class="card-body">
        <div class="container text-center">
            @if (!string.IsNullOrEmpty(Model.Message))
            {
                <div class="alert alert-warning" role="alert">
                    @Model.Message
                </div>
            }
            <h1 class="card-title">SGCodeChallenge</h1>
            <label for="currencyDropdown">Seleccionar Moneda:</label>
            <select id="currencyDropdown" class="form-control" name="SelectedCurrency">
                <option value="0">Seleccionar</option>
                @foreach (var currency in Model.Currencies)
                {
                    <option value="@currency.Id">@currency.Abbreviation, @currency.Name</option>
                }
            </select>
            @if (Model.SelectedAccount != null)
            {
                <h2>@Model.SelectedAccount.Currency.Symbol @Model.SelectedAccount.Balance</h2>
                <button type="button" class="btn btn-primary" id="btnDepositShow">Depositar</button>
                <button type="button" class="btn btn-secondary" id="btnWithdrawShow">Extraer</button>
                <button type="button" class="btn btn-danger" id="btnCloseAccount">Cerrar Cuenta</button>
                <div class="container">
                    <div class="row g-3" id="rowDeposit">
                        <div class="col-md-4">
                            <label for="txtDeposit">Ingrese el monto a depositar:</label>
                        </div>
                        <div class="col-md-4">
                            <input type="number" class="form-control" id="txtDeposit">
                        </div>
                        <div class="col-md-4">
                            <button type="button" class="btn btn-success" id="btnDeposit">Depositar</button>
                        </div>
                    </div>
                    <div class="row g-3" id="rowWithdraw">
                        <div class="col-md-4">
                            <label for="txtWithDraw">Ingrese el monto a extraer:</label>
                        </div>
                        <div class="col-md-4">
                            <input type="number" class="form-control" id="txtWithdraw">
                        </div>
                        <div class="col-md-4">
                            <button type="button" class="btn btn-success" id="btnWithdraw">Extraer</button>
                        </div>

                    </div>
                </div>
            }
            else if (Model.SelectedCurrency != 0)
            {
                <button type="button" class="btn btn-primary" id="btnOpenAccount">Abrir Cuenta</button>
            }
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            var selectedCurrency = @Model.SelectedCurrency;
            $('#currencyDropdown').val(selectedCurrency);
            $('#rowDeposit, #rowWithdraw').hide();

            $('#currencyDropdown').change(function () {
                var SelectedCurrency = $(this).val();
                var indexViewModel = @Html.Raw(Json.Serialize(Model));
                var indexViewModel = {
                    SelectedAccount: null,
                    Currencies: @Html.Raw(Json.Serialize(Model.Currencies)),
                    SelectedCurrency: parseInt(SelectedCurrency),
                    Message: "",
                    Token: '@Model.Token'
                };

                console.log(JSON.stringify(indexViewModel));
                var Token = '@Model.Token';
               
                $.ajax({
                    type: 'POST',
                    url: '/Home/GetSelectedAccount',
                    dataType: 'html',
                    contentType: 'application/json',
                    data: JSON.stringify(indexViewModel),
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + Token);
                    },
                    success: function (data) {
                        window.location.href = '/Home/Index';
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log('Error retrieving SelectedAccount.');
                        console.log('jqXHR:', jqXHR);
                        console.log('textStatus:', textStatus);
                        console.log('errorThrown:', errorThrown);
                    }
                });
            });

            $('#btnOpenAccount').click(function () {
                var indexViewModel = {
                    SelectedAccount: null,
                    Currencies: @Html.Raw(Json.Serialize(Model.Currencies)),
                    SelectedCurrency: @Model.SelectedCurrency,
                    Message: "",
                    Token: '@Model.Token'

                                                        };

                console.log(JSON.stringify(indexViewModel));
                var Token = '@Model.Token';


                $.ajax({
                    type: 'POST',
                    url: '/Home/OpenAccount',
                    dataType: 'html',
                    contentType: 'application/json',
                    data: JSON.stringify(indexViewModel),
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + Token);
                    },
                    success: function (data) {
                        window.location.href = '/Home/Index';
                    },
                    error: function () {
                        console.log('Error opening account.');
                    }
                });
            });

            $('#btnCloseAccount').click(function () {
                var indexViewModel = {
                    SelectedAccount: null,
                    Currencies: @Html.Raw(Json.Serialize(Model.Currencies)),
                    SelectedCurrency: @Model.SelectedCurrency,
                    Message: "",
                    Token: '@Model.Token'
                                                        };

                console.log(JSON.stringify(indexViewModel));
                var Token = '@Model.Token';


                $.ajax({
                    type: 'POST',
                    url: '/Home/CloseAccount',
                    dataType: 'html',
                    contentType: 'application/json',
                    data: JSON.stringify(indexViewModel),
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + Token);
                    },
                    success: function (data) {
                        window.location.href = '/Home/Index';
                    },
                    error: function () {
                        console.log('Error closing account.');
                    }
                });
            });

            $('#btnDepositShow').click(function () {
                $('#rowDeposit').show();
                $('#rowWithdraw').hide();

            });
            
            $('#btnWithdrawShow').click(function () {
                $('#rowWithdraw').show();
                $('#rowDeposit').hide();
            });

            $('#btnDeposit').click(function () {
                var indexViewModel = {
                    SelectedAccount: null,
                    Currencies: @Html.Raw(Json.Serialize(Model.Currencies)),
                    SelectedCurrency: @Model.SelectedCurrency,
                    Amount : $('#txtDeposit').val(),
                    Message: "",
                    Token: '@Model.Token'

                };
                console.log(JSON.stringify(indexViewModel));
                var Token = '@Model.Token';

                $.ajax({
                    type: 'POST',
                    url: '/Home/Deposit',
                    dataType: 'html',
                    contentType: 'application/json',
                    data: JSON.stringify(indexViewModel),
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + Token);
                    },
                    success: function (data) {
                        window.location.href = '/Home/Index';
                    },
                    error: function () {
                        console.log('Error opening account.');
                    }
                });
            });

            $('#btnWithdraw').click(function () {
                var indexViewModel = {
                    SelectedAccount: null,
                    Currencies: @Html.Raw(Json.Serialize(Model.Currencies)),
                    SelectedCurrency: @Model.SelectedCurrency,
                    Amount: $('#txtWithdraw').val(),
                    Message: "",
                    Token: '@Model.Token'

                };

                console.log(JSON.stringify(indexViewModel));
                var Token = '@Model.Token';

                $.ajax({
                    type: 'POST',
                    url: '/Home/Withdraw',
                    dataType: 'html',
                    contentType: 'application/json',
                    data: JSON.stringify(indexViewModel),
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + Token);
                    },
                    success: function (data) {
                        window.location.href = '/Home/Index';
                    },
                    error: function () {
                        console.log('Error opening account.');
                    }
                });
            });

        });
    </script>
}